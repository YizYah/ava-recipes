{
	"test a private function": {
		"scope": "typescript",
		"prefix": "learn-private",
		"body": [
			"const rewire = require('rewire');",
			"let ${1:module} = rewire('${2:path}${1:module}') //[4a]",
			"const ${3:function}$Stub = ${1:module}.__get__('${3:function}') //[4b]",
			"//[4c] test the stub...",
			"$0"
		]
	},
	"result-is": {
		"scope": "typescript",
		"prefix": "learn-result-is",
		"body": [
			"const result = ${1:called} // execution",
			"t.is(result, ${2:expected}) // assertion"
		]
	},
	"stub a function": {
		"scope": "typescript",
		"prefix": "learn-stub",
		"body": [
			"const sinon = require('sinon');",
			"let sandbox = sinon.createSandbox() //[5a declare sandbox]",
			"",
			"const ${1:module} = require('${2:modulePath}${1:module}'); //[5b require module]",
			"const ${3:func}Fake = ()=> { //[5c define fake]",
			"\t// replacement code here...$0",
			"}",
			"",
			"sandbox.stub(${1:module}, '${3:func}') //[5d declare stub]",
			"\t.callsFake(${3:func}Fake)",
			"",
			"//[5e test] use stub here...",
			"",
			"sandbox.restore() //[5f]"
		]
	},
	"stub a private function": {
		"scope": "typescript",
		"prefix": "learn-stub-private",
		"body": [
			"const rewire = require('rewire')",
			"let ${1:module}Mod = rewire('${2:path}${1:module}') //[6a require module]",
			"",
			"const ${3:func}Fake = () => { //[6b fake function]",
			"    // replacement code here",
			"}",
			"",
			"const ${3:func}Revert = ${1:module}Mod.__set__('${3:func}', ${3:func}Fake ) //[6c assign stub]",
			"",
			"//[6d] run tests here...",
			"$0",
			"${3:func}Revert() //[6e restore module]",
			""
		]
	},
	"create a basic test": {
		"scope": "typescript",
		"prefix": "learn-test",
		"body": [
			"import test from 'ava' //[2b test runner]",
			"//[2c import needed modules here...",
			"test('${1:name}', t => {  //[2d]",
			"\tconst result = ${1:name}(${2:params}) //[2e result-is]",
			"\tt.is(result, ${3:expected})",
			"//run tests"
			"})"
		]
	},
	"test for an error": {
		"scope": "typescript",
		"prefix": "learn-throws-expect",
		"body": [
			"const error = t.throws(() => { //[3a assign variable]",
				"\t${1:body}",
			 "})",
			 "",
			 "t.regex(error.message, /${2:regex}/) //[3b assertion]"
		]
	}
}