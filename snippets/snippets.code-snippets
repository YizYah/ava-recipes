{
	"test a private function": {
		"prefix": "private",
		"body": [
			"const rewire = require('rewire');",
			"let ${1:module} = rewire('${2:path}${1:module}')",
			"const ${3:function}$Stub = ${1:module}.__get__('${3:function}')"
		]
	},
	"result-is": {
		"prefix": "result-is",
		"body": [
			"const result = ${1:called}",
			"t.is(result, ${2:expected});"
		]
	},
	// "stub an imported module": {
	// 	"prefix": "stub-module",
	// 	"body": [
	// 		"const rewire = require('rewire')",
	// 		"",
	// 		"const ${1:constToStub}Fake = ()=> {",
	// 		"\t// replacement code here...",
	// 		"}",
	// 		"const ${2:fileToTest} = rewire('${3:srcFilePath}${2:fileToTest}');",
	// 		"",
	// 		"${2:fileToTest}.__set__('${4:moduleForConst}', {",
	// 		"   ${1:constToStub}: ${1:constToStub}Fake",
	// 		"  })",
	// 		"",
	// 		"// run tests here for the code calling '${1:constToStub}'...",
	// 		"$0",
	// 		""
	// 	]
	// },
	"stub a function or constant": {
		"prefix": "stub-constant",
		"body": [
			"const proxyquire = require('proxyquire')",
			"",
			"const ${1:constantToFake}Fake = ()=> {",
			"     // put here fake code for '${1:constantToFake}'...",
			"}",
			"",
			"const ${2:testedFile}Module = proxyquire('${3:path}${2:testedFile}', {",
			"    '${4:modulePathFromTestedFile}': {",
			"        ${1:constantToFake}: ${1:constantToFake}Fake" ,
			"    }",
			"}); ",
			"const {${5:functionToTest}} = ${2:testedFile}Module",
			"",
			"// run tests below as normal for code using '${1:constantToFake}'",
			"$0",
			""
		]
	},
	"new test file with a basic test": {
		"prefix": "new-normal-test",
		"body": [
			"import test from 'ava'",
			"",
			"test('${1:name}', t => {",
			"\tconst result = ${1:name}(${3:params})",
			"\tt.is(result, ${4:expected});",
			"})"	
		]
	},
	"new test file with an async test": {
		"prefix": "new-async-test",
		"body": [
			"import test from 'ava'",
			"",
			"test('${1:name}', async t => {",
			"\tconst result = await ${1:name}(${2:params})",
			"\tt.is(result, ${3:expected});",
			"})"	
		]
	},
	"new test file with an empty test": {
		"prefix": "new-test-no-content",
		"body": [
			"import test from 'ava'",
			"",
			"test('${1:name}', ${2|t, async t|} => {",
			"\t$0",
			"})"	
		]
	},
	"test for an error": {
		"prefix": "throws-expect",
		"body": [
			"const error = t.throws(() => {",
				"\t${1:body}",
			 "})",
			 "",
			 "t.regex(error.message, /${2:regex}/);"
		]
	},
	"test for an error in an async function": {
		"prefix": "throws-expect-async",
		"body": [
			"const error = await t.throwsAsync(async () => {",
				"\tawait ${1:function}(${2:params})",
			 "})",
			 "",
			 "t.regex(error.message, /${3:regex}/);"
		]
	}}